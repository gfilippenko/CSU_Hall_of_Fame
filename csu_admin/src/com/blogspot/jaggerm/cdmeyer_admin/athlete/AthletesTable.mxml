<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="500"
		 creationComplete="group1_creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- Разместить невизуальные элементы (например, службы или объекты значений) -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.blogspot.jaggerm.cdmeyer_admin.events.CSUAdminEvent;
			import com.blogspot.jaggerm.cdmeyer_admin.model.Athlete;
			
			import flash.utils.flash_proxy;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ISort;
			import mx.collections.ISortField;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			
			private var athleteWnd : AthleteWindow;
			private var columnIndexes:Vector.<int> = Vector.<int>([ 1 ]);
			private var sort:ISort;
			
			public function PopulateList(atheltes : Array) : void
			{
//				var arr : ArrayCollection = new ArrayCollection(atheltes);
//				arr.sort = sort;
//				arr.refresh();
//				table.dataProvider = arr;
//				ArrayCollection(table.dataProvider).disableAutoUpdate();
//				ArrayCollection(table.dataProvider).removeAll();
//				var len : uint = atheltes.length;
				for each(var item : Athlete in atheltes)
				{
					table.dataProvider.addItem(item);
				}
				
//				ArrayCollection(table.dataProvider).enableAutoUpdate();
//				callLater(table.sortByColumns, [columnIndexes]);
//				ArrayCollection(table.dataProvider).sort = new Sort;
//				table.invalidateProperties();
//				table.invalidateDisplayList();
//				callLater(ArrayCollection(table.dataProvider).refresh);
			}
			
			private function ShowWnd() : void
			{
				if(athleteWnd == null)
				{
					athleteWnd = PopUpManager.createPopUp(this, AthleteWindow, true) as AthleteWindow;
					athleteWnd.addEventListener(CSUAdminEvent.ADD_ITEM, AthleteAdded);
					athleteWnd.addEventListener(CSUAdminEvent.EDIT_ITEM, AthleteEdited);
					athleteWnd.move(0, 0);
//					PopUpManager.centerPopUp(athleteWnd);
				}	
				else 
					PopUpManager.addPopUp(athleteWnd, this, true);
			}
			
			protected function btnAdd_clickHandler(event:MouseEvent):void
			{
				ShowWnd();
				athleteWnd.SetAdd();
			}
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				table.addEventListener(CSUAdminEvent.EDIT_ITEM, OnEditEvent);
				table.addEventListener(CSUAdminEvent.DELETE_ITEM, OnDeleteEvent);
				
				sort = new Sort();				
				var sortfieldLastName:ISortField = new SortField("lastName");				
				sort.fields = [sortfieldLastName];
				ArrayCollection(table.dataProvider).sort = sort;
				ArrayCollection(table.dataProvider).refresh();
			}
			
			private function OnEditEvent(e : CSUAdminEvent) : void
			{
				ShowWnd();
				athleteWnd.SetEdit(table.selectedItem as Athlete);
			}
			
			
			private var athleteToDelete : String;
			private function OnDeleteEvent(e : CSUAdminEvent) : void
			{
				athleteToDelete = e.itemID;
				Alert.show('Are you sure you want to delete (' + table.selectedItem.firstName + ' ' + table.selectedItem.lastName + ')? This action cannot be undone and all respective data for this athlete will be deleted permanently!', 'Warning!', Alert.YES|Alert.CANCEL, this, OnDeleteAlert);
			}
			
			private function OnDeleteAlert(e : CloseEvent) : void
			{
				if(e.detail != Alert.YES)
					return;
				Alert.show('You successfully deleted athlete ' + csu_admin.athletes[Number(athleteToDelete)].firstName + ' ' + csu_admin.athletes[Number(athleteToDelete)].lastName + '.');
				csu_admin.athletes.splice(athleteToDelete, 1);
				csu_admin.SaveAthletes();
				var len : uint = table.dataProvider.length;
				var i:uint;
				for (i=0;i<len;i++)
				{
					if(table.dataProvider[i].id == athleteToDelete)
					{
						table.dataProvider[i].RemoveAllInfo();
						table.dataProvider.removeItemAt(i);
						break;
					}
				}
			}
			
			private function AthleteAdded(e : CSUAdminEvent) : void
			{				
				e.athlete.id = String(table.dataProvider.length);
				csu_admin.athletes.push(e.athlete);
				csu_admin.SaveAthletes();
				table.dataProvider.addItem(e.athlete);
				ArrayCollection(table.dataProvider).refresh();
				Alert.show('You successfully added ' + e.athlete.firstName + ' ' + e.athlete.lastName, 'Message');
//				table.sortByColumns(columnIndexes);
			}
			
			private function AthleteEdited(e : CSUAdminEvent) : void
			{
				csu_admin.SaveAthletes();
				
				var len : uint = table.dataProvider.length;
				var i : uint;
				for(i=0;i<len;i++)
				{
					if(table.dataProvider[i].id == e.athlete.id)
					{
						table.dataProvider[i] = e.athlete;
						ArrayCollection(table.dataProvider).refresh();
						break;
					}
				}
				
				Alert.show('You successfully edited ' + e.athlete.firstName + ' ' + e.athlete.lastName, 'Message');
//				table.sortByColumns(columnIndexes);
			}
		]]>
	</fx:Script>
	
	<s:Button id="btnAdd" label="Add Athlete" click="btnAdd_clickHandler(event)"/>
	<s:DataGrid id="table" dataProvider="{new ArrayCollection()}" width="100%" height="100%">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn id="firstName" width="300" dataField="firstName" headerText="First Name"/>
				<s:GridColumn id="lastName" width="300" dataField="lastName" headerText="Last Name"/>
				<s:GridColumn id="editDecade" width="80" headerText="Edit" itemRenderer="com.blogspot.jaggerm.cdmeyer_admin.renderers.EditButtomRenderer"/>
				<s:GridColumn id="deleteDecade" width="80" headerText="Delete" itemRenderer="com.blogspot.jaggerm.cdmeyer_admin.renderers.DeleteButtonItemRenderer"/>	
			</s:ArrayList>			
		</s:columns>
	</s:DataGrid>
</s:Group>
