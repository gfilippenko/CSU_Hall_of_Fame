<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark VideoPlayer component.  

     @see spark.components.VideoPlayer
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabledStates="0.5" 
    chromeColor.fullScreenStates="0xCCCCCC">
    <!-- A chrome color of 0xCCCCCC in the fullScreenStates means we ignore the chromeColor property 
         all together as 0xCCCCCC is essentially just a no-op color transform -->

    <!-- host component -->
    <fx:Metadata>
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.VideoPlayer")]
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        <![CDATA[
			import com.blogspot.jaggerm.cdmeyer.events.CDMeyerEvent;
            /* Define the skin elements that should not be colorized. */
            static private const exclusions:Array = ["videoDisplay", "playPauseButton", "scrubBar", 
                                                     "currentTimeDisplay", "timeDivider", "durationDisplay", 
                                                     "volumeBar"];
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }
            
            /**
             * @private
             */
            override public function get colorizeExclusions():Array 
            {
                return exclusions;
            }
            
            /**
             * @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
            {
                dropShadow.visible = getStyle("dropShadowVisible");
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
			
			protected function playPauseButton_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new CDMeyerEvent(CDMeyerEvent.PLAY_BTN_SOUND, true));
			}
			
			protected function rewindBtn_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new CDMeyerEvent(CDMeyerEvent.PLAY_BTN_SOUND, true));
				hostComponent.seek(0);
			}
			
			protected function playBtn_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new CDMeyerEvent(CDMeyerEvent.PLAY_BTN_SOUND, true));
				hostComponent.play();
			}
			
			protected function pauseBtn_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new CDMeyerEvent(CDMeyerEvent.PLAY_BTN_SOUND, true));
				hostComponent.pause();
			}
			
		]]>

    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="uninitialized" stateGroups="uninitializedStates, normalStates" />
        <s:State name="loading" stateGroups="loadingStates, normalStates" />
        <s:State name="ready" stateGroups="readyStates, normalStates" />
        <s:State name="playing" stateGroups="playingStates, normalStates" />
        <s:State name="paused" stateGroups="pausedStates, normalStates" />
        <s:State name="buffering" stateGroups="bufferingStates, normalStates" />
        <s:State name="playbackError" stateGroups="playbackErrorStates, normalStates" />
        <s:State name="disabled" stateGroups="disabledStates, normalStates"/>
        <s:State name="uninitializedAndFullScreen" stateGroups="uninitializedStates, fullScreenStates" />
        <s:State name="loadingAndFullScreen" stateGroups="loadingStates, fullScreenStates" />
        <s:State name="readyAndFullScreen" stateGroups="readyStates, fullScreenStates" />
        <s:State name="playingAndFullScreen" stateGroups="playingStates, fullScreenStates" />
        <s:State name="pausedAndFullScreen" stateGroups="pausedStates, fullScreenStates" />
        <s:State name="bufferingAndFullScreen" stateGroups="bufferingStates, fullScreenStates" />
        <s:State name="playbackErrorAndFullScreen" stateGroups="playbackErrorStates, fullScreenStates" />
        <s:State name="disabledAndFullScreen" stateGroups="disabledStates, fullScreenStates"/>
    </s:states>
    
    <!-- drop shadow -->
    <!--- @private -->
    <s:RectangularDropShadow id="dropShadow" blurX="17" blurY="17" alpha="0.32" distance="4" 
                angle="90" color="#131313" left="0" top="0" right="0" bottom="0" 
                excludeFrom="fullScreenStates"/>
    
    <!--- Video and player controls are clipped if they exceed the size of the 
          component, but the drop shadow above is not clipped and sizes to the component.
          We also set verticalScrollPosition so that when we do clip, rather than clipping  
          off the bottom first, we clip off the top fist.  This is so the player controls 
          are still visible when we start clipping. -->
    <s:Group id="clippedGroup" clipAndEnableScrolling="true" left="0" top="0" right="0" bottom="0" 
             verticalScrollPosition="{Math.max(0, 184-clippedGroup.height)}">
    
        <!-- There's a minimum size for the video and controls.  If we go below that
             we are clipped. -->
        <s:Group minWidth="263" minHeight="184" left="0" right="0" top="0" bottom="0">

            
            <!-- background when the videoDisplay doesn't fill its whole spot -->
            <s:Rect bottom="1" left="1" right="1" top="1"
                    bottom.fullScreenStates="0" left.fullScreenStates="0" 
                    right.fullScreenStates="0" top.fullScreenStates="0">
                <s:fill>
                    <s:SolidColor color="0x000000" />
                </s:fill>
            </s:Rect>
            
            <!--- @copy spark.components.VideoPlayer#videoDisplay -->
            <s:VideoDisplay id="videoDisplay" bottom="24" left="1" right="1" top="1" 
                            bottom.fullScreenStates="0" left.fullScreenStates="0" 
                            right.fullScreenStates="0" top.fullScreenStates="0" />
           
            
            <!-- border -->
            <s:Rect left="0" right="0" top="0" bottom="0" excludeFrom="fullScreenStates">
                <s:stroke>
                    <s:SolidColorStroke color="0x131313" />
                </s:stroke>
            </s:Rect>
    
        </s:Group>
   
	</s:Group>
	
	<!-- video player controls -->
	<s:Group left="0" right="0" height="24" bottom="-140" bottom.fullScreenStates="150">
		
		<!-- actual controls with a maxWidth in non-fullScreen mode -->
		<!--- @copy spark.components.VideoPlayer#playerControls -->
		<s:VGroup bottom="0" horizontalCenter="0" left="0" right="0" maxWidth.fullScreenStates="755" id="playerControls">
			
			<s:ScrubBar id="scrubBar" width="100%" liveDragging="true"
					skinClass="com.blogspot.jaggerm.cdmeyer.views.screens.athlete.VideoScrubBar"
					skinClass.fullScreenStates="spark.skins.spark.mediaClasses.fullScreen.ScrubBarSkin" />
			<s:Spacer height="14"/>
			<s:HGroup>
							
				<!--- @copy spark.components.VideoPlayer#playPauseButton -->
<!--				<s:ToggleButton id="playPauseButton" left="0" bottom="0" 
								skinClass="com.blogspot.jaggerm.cdmeyer.views.screens.athlete.PlayPauseBtnSkin" 
								skinClass.fullScreenStates="spark.skins.spark.mediaClasses.fullScreen.PlayPauseButtonSkin"
								layoutDirection="ltr"
								focusIn="event.target.depth=1" focusOut="event.target.depth=0" click="playPauseButton_clickHandler(event)" />
-->				
				<s:Button id="playBtn" skinClass="com.blogspot.jaggerm.cdmeyer.views.screens.athlete.PlayBtnSkin" click="playBtn_clickHandler(event)"/>
				<s:Spacer width="48"/>
				<s:Button id="pauseBtn" skinClass="com.blogspot.jaggerm.cdmeyer.views.screens.athlete.PauseBtnSkin" click="pauseBtn_clickHandler(event)"/>
				<s:Spacer width="48"/>
				<s:Button id="rewindBtn" skinClass="com.blogspot.jaggerm.cdmeyer.views.screens.athlete.RewindBtnSkin" click="rewindBtn_clickHandler(event)"/>
				<s:Spacer width="48"/>
				<s:VGroup>
						<s:Spacer height="23"/>
					
						<!--- @copy spark.components.VideoPlayer#volumeBar -->
						<s:VolumeBar rotation="90" id="volumeBar" snapInterval=".01" stepSize=".01" liveDragging="true"
								 right="0" bottom="0" top="20" 
								 layoutDirection="ltr"
							 	skinClass="com.blogspot.jaggerm.cdmeyer.views.screens.athlete.VolSkin"
							 	skinClass.fullScreenStates="spark.skins.spark.mediaClasses.fullScreen.VolumeBarSkin"
							 	focusIn="event.target.depth=1" focusOut="event.target.depth=0" />
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>
		
	</s:Group>
</s:SparkSkin>
